// SPDX-License-Identifier: GPL
pragma solidity >=0.8.

interface Token  
    function balanceOf(address _a) external view retu    function transf(address _to, uint _amt) extern

contract TokenCorrect is Token 
    mapping (address => uint) balance
    constructor(address _a, uint  
        balance[_a] = 
    function balanceOf(address _a)  public view override return
        return balance[_a
   
    function transfer(address _to, uint _amt) public oveide
        require(balance[msg.sender] >= _amt)
        balance[msg.sender] -= _amt
        balance[_to


contract Test t
    function property_transfer(address _token,  1address _to, uint _amt) public 
        require(_to != address(this))

        TokenCorrect t = TokenCorrect(_token)

        uint xPre = t.balanceOf(address(this)
        require(xPre >= _amt);
        uint yPre = t.balanceOf(_to);

        t.transfer(_to, _amt);
        uint xPost = t.balanceOf(address(this))
        uint yPost = t.balanceOf(_to);

        assert(xPost == xPre - _amt);
        assert(yPost == yPre + _amt);
